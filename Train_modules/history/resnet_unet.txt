def renet_unet(input_size,lr=1e-3):
    inputs = Input(shape=input_size)

    ### [First half of the network: downsampling inputs] ###

    # Entry block
    x =  Conv2D(32, 3, strides=2, padding="same")(inputs)
    x =  BatchNormalization()(x)
    x =  Activation("relu")(x)

    previous_block_activation = x  # Set aside residual

    # Blocks 1, 2, 3 are identical apart from the feature depth.
    for filters in [64, 128, 256]:
        x =  Activation("relu")(x)
        x =  SeparableConv2D(filters, 3, padding="same")(x)
        x =  BatchNormalization()(x)

        x =  Activation("relu")(x)
        x =  SeparableConv2D(filters, 3, padding="same")(x)
        x =  BatchNormalization()(x)

        x =  MaxPooling2D(3, strides=2, padding="same")(x)

        # Project residual
        residual =  Conv2D(filters, 1, strides=2, padding="same")(
            previous_block_activation
        )
        x =  add([x, residual])  # Add back residual
        previous_block_activation = x  # Set aside next residual

    ### [Second half of the network: upsampling inputs] ###

    for filters in [256, 128, 64, 32]:
        x =  Activation("relu")(x)
        x =  Conv2DTranspose(filters, 3, padding="same")(x)
        x =  BatchNormalization()(x)

        x =  Activation("relu")(x)
        x =  Conv2DTranspose(filters, 3, padding="same")(x)
        x =  BatchNormalization()(x)

        x =  UpSampling2D(2)(x)

        # Project residual
        residual =  UpSampling2D(2)(previous_block_activation)
        residual =  Conv2D(filters, 1, padding="same")(residual)
        x =  add([x, residual])  # Add back residual
        previous_block_activation = x  # Set aside next residual

    # Add a per-pixel classification layer
    outputs =  Conv2D(1, 3, activation="sigmoid", padding="same")(x)

    # Define the model
    model = Model(inputs, outputs)

    iou = metrics.iou()
    model.compile(optimizer = Adam(lr = lr), loss = 'binary_crossentropy', metrics = ['accuracy', tf.keras.metrics.Precision(name='Precision'),tf.keras.metrics.Recall(name='Recall'), iou])
    
    model.summary()

    return model
